var apiData = {"Array.prototype.lastIndexOf":{"requires":[],"parameters":[{"description":"<p>指定的值。</p>","type":"*","name":"searchElement","isOptional":false},{"description":"<p>从指定索引为起始点开始查找，默认为数组的长度。</p><p>如果指定的值大于数组的长度，则使用数组的长度作为查找起始点。</p><p>如果指定一个负数，则表示从数组的末尾开始计算的偏移量，即使用 (fromIndex + 数组的长度) 作为查找起始点，如果这个结果仍为负数，则使用 0 作为查找起始点。</p>","type":"number","name":"fromIndex","isOptional":true}],"isStatic":false,"description":"<p>返回数组中最后一次出现指定的值的索引。</p>","isConstructor":false,"returns":[{"type":"number","description":"<p>索引值，如果数组中不包含指定的值，则返回 -1。</p>"}],"type":"number","since":"","see":["http://es5.github.com/#x15.4.4.15","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf"],"fires":[],"deprecated":"","examples":["[1, 2, 3, 2, 1].lastIndexOf(2);\r// 3\r[1, 2, 3, 2, 1].lastIndexOf(2, 2);\r// 1\r[1, 2, 3, 2, 1].lastIndexOf(2, -3)\r// 1\r[1, 2, 3, 2, 1].lastIndexOf(8)\r// -1"],"isFunction":true,"name":"Array.prototype.lastIndexOf"},"Element.prototype.getPrevious":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取与本元素相邻的上一个元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>与本元素相邻的上一个元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getPrevious"},"navigator.isIE10":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE10。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIE10"},"Slideshow.options":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>默认选项。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Slideshow.options"},"Calendar.prototype.getElement":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取月历的容器元素，以便选择插入 DOM 树的位置。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>月历的容器元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Calendar.prototype.getElement"},"Number.isNaN":{"requires":[],"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"isStatic":true,"description":"<p>检查提供的值是否为非数字。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isnan"],"fires":[],"deprecated":"","examples":["isNaN(undefined);\r// true\rNumber.isNaN(undefined);\r// false"],"isFunction":true,"name":"Number.isNaN"},"RegExp.escape":{"requires":[],"parameters":[{"description":"<p>要编码的字符串。</p>","type":"string","name":"string","isOptional":false}],"isStatic":true,"description":"<p>为字符串编码，避免创建正则表达式时破坏预期的结构。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>编码后的字符串。</p>"}],"type":"string","since":"","see":["http://prototypejs.org/"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"RegExp.escape"},"Element.prototype.replace":{"requires":[],"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false},{"description":"<p>是否保留目标元素及后代元素上绑定的所有事件监听器。</p>","type":"boolean","name":"keepListeners","isOptional":true}],"isStatic":false,"description":"<p>使用本元素替换目标元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.replace"},"Object":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Object"},"Element.prototype.highlight":{"requires":[],"parameters":[{"description":"<p>高亮颜色，默认为 'yellow'。</p>","type":"string","name":"color","isOptional":true},{"description":"<p>高亮样式名，默认为 'backgroundColor'。</p>","type":"string","name":"property","isOptional":true},{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位是毫秒，默认为 500。</p>","type":"number","name":"options.duration","isOptional":false},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeIn'。</p>","type":"string","name":"options.timingFunction","isOptional":false},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":false},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":false}],"isStatic":false,"description":"<p>让本元素播放一个高亮动画。</p><p>如果本元素的动画播放列表中已经存在一个 highlight 动画，则停止旧的，播放新的。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.highlight"},"Global":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>全局对象。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Global"},"Event.prototype.preventDefault":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>阻止事件的默认行为。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Event.prototype.preventDefault"},"window.fire":{"requires":[],"parameters":[{"description":"<p>事件类型。</p>","type":"String","name":"type","isOptional":false},{"description":"<p>在事件对象上附加的数据。</p>","type":"Object","name":"data","isOptional":true}],"isStatic":true,"description":"<p>触发 window 的某类事件，运行相关的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>window 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"window.fire"},"Event.prototype.pageX":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在页面中的 X 坐标，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.pageX"},"Event.prototype.pageY":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在页面中的 Y 坐标，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.pageY"},"Element.prototype.setStyle":{"requires":[],"parameters":[{"description":"<p>特性名，支持 camel case 和 hyphenate 格式。</p>","type":"string","name":"propertyName","isOptional":false},{"description":"<p>特性值，若为数字，则为期望长度单位的特性值自动添加长度单位 'px'。</p>","type":"number|string","name":"propertyValue","isOptional":false}],"isStatic":false,"description":"<p>为本元素设置一条行内样式声明。</p><p>注意：</p><p>如果设置的是长度值，若长度单位不是 'px' 则不能省略长度单位。</p><p>可以设置复合属性的值。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.setStyle"},"Element.prototype.find":{"requires":[],"parameters":[{"description":"<p>选择符。</p>","type":"string","name":"selector","isOptional":false}],"isStatic":false,"description":"<p>在本元素的后代元素中，根据指定的选择符查找元素。</p><p>本功能使用 Sizzle 实现，关于可以使用的 selector 信息，请参考 Sizzle 的相关说明。</p>","isConstructor":false,"returns":[{"type":"Array","description":"<p>包含查找到的元素的数组。</p>"}],"type":"Array","since":"","see":["https://github.com/jquery/sizzle/wiki/Sizzle-Home"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.find"},"Boolean.prototype.toJSON":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>将布尔值转换为 JSON 格式的字符串。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Boolean.prototype.toJSON"},"localStorage.removeItem":{"requires":[],"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"isStatic":true,"description":"<p>从 localStorage 中删除一条数据。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"localStorage.removeItem"},"Element.prototype.outerHTML":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取/设置本元素（包含后代节点在内）的序列化字符串。</p><p>注意：</p><p>getter 在处理空标签及特殊字符时，各浏览器行为不一致。</p>","isConstructor":false,"returns":[],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Element.prototype.outerHTML"},"Number.isFinite":{"requires":[],"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"isStatic":true,"description":"<p>检查提供的值是否为有限的数字。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isfinite"],"fires":[],"deprecated":"","examples":["isFinite(null);\r// true\rNumber.isFinite(null);\r// false"],"isFunction":true,"name":"Number.isFinite"},"String.prototype.trim":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>删除字符串两端的空白符。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>删除两端的空白符后的字符串。</p>"}],"type":"string","since":"","see":["http://blog.stevenlevithan.com/archives/faster-trim-javascript","http://es5.github.com/#x15.5.4.20"],"fires":[],"deprecated":"","examples":["'  hello '.trim();\r// 'hello'"],"isFunction":true,"name":"String.prototype.trim"},"window.off":{"requires":[],"parameters":[{"description":"<p>事件名称，格式请参考 Element.prototype.off 的同名参数。</p>","type":"string","name":"name","isOptional":false}],"isStatic":true,"description":"<p>删除 window 上已添加的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>window 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"window.off"},"cookie.setItem":{"requires":[],"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>数据值。</p>","type":"string","name":"value","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>限定生效的路径，默认为当前路径。</p>","type":"string","name":"options.path","isOptional":false},{"description":"<p>限定生效的域名，默认为当前域名。</p>","type":"string","name":"options.domain","isOptional":false},{"description":"<p>是否仅通过 SSL 连接 (HTTPS) 传输本条数据，默认为否。</p>","type":"boolean","name":"options.secure","isOptional":false},{"description":"<p>过期时间。</p>","type":"Date","name":"options.expires","isOptional":false}],"isStatic":true,"description":"<p>在 cookie 中保存一条数据。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"cookie.setItem"},"Element.prototype.hasClass":{"requires":[],"parameters":[{"description":"<p>类名。</p>","type":"string","name":"className","isOptional":false}],"isStatic":false,"description":"<p>判断本元素是否有指定的类名。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>本元素是否有指定的类名。</p>"}],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.hasClass"},"Element.prototype.contains":{"requires":[],"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"isStatic":false,"description":"<p>判断本元素是否包含目标元素。</p><p>注意，如果本元素和目标元素一致，本方法也将返回 true。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>判断结果。</p>"}],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.contains"},"Paginator.options":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>默认选项。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Paginator.options"},"Global.execScript":{"requires":[],"parameters":[{"description":"<p>要执行的代码。</p>","type":"string","name":"code","isOptional":false}],"isStatic":true,"description":"<p>将字符串作为脚本执行，执行时的作用域为全局作用域。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":["var a;\rexecScript('a = 128 * 2 + 256;');\ra;\r// 512"],"isFunction":true,"name":"Global.execScript"},"Element.prototype.getLast":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本元素的最后一个子元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素的最后一个子元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getLast"},"navigator.isIE6":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE6。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIE6"},"navigator.isIE7":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE7。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIE7"},"Element.prototype.getNext":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取与本元素相邻的下一个元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>与本元素相邻的下一个元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getNext"},"navigator.isIE8":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE8。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIE8"},"navigator.isIE9":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE9。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIE9"},"Animation.createStyleRenderer":{"requires":[],"parameters":[{"description":"<p>要实施渐变效果的元素。</p>","type":"Element","name":"element","isOptional":false},{"description":"<p>要实施渐变效果的样式。支持相对长度值和颜色值，其中相对长度值目前仅支持像素单位，颜色值支持 140 个预命名颜色名称、#RRGGBB 格式、#RGB 格式或 rgb(正整数R, 正整数G, 正整数B) 格式。</p>","type":"Object","name":"styles","isOptional":false}],"isStatic":true,"description":"<p>创建样式渐变效果渲染器。</p><p>样式渐变效果渲染器只能指定一个元素。</p>","isConstructor":false,"returns":[{"type":"Function","description":"<p>生成的渲染器。</p>"}],"type":"Function","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Animation.createStyleRenderer"},"RegExp":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"RegExp"},"document.$":{"requires":[],"parameters":[{"description":"<p>不同类型的元素表示。</p>","type":"string|Element","name":"e","isOptional":false}],"isStatic":true,"description":"<p>根据指定的参数获取/创建一个元素，并对其进行扩展。</p><p>当参数为一个元素的序列化之后的字符串（它可以包含子元素）时，会返回扩展后的、根据这个字符串反序列化的元素。</p><p>这里与其他实现相比有以下几点差异：</p><ul><li>忽略“IE 丢失源代码前的空格”的问题，通过脚本修复这个问题无实际意义（需要深度遍历）。</li><li>修改“IE 添加多余的 tbody 元素”的问题的解决方案，在 wrappers 里预置一个 tbody 即可。</li><li>忽略“脚本不会在动态创建并插入文档树后自动执行”的问题，因为这个处理需要封装 append 等方法，并且还需要考虑脚本的 defer 属性在各浏览器的差异（IE 中添加 defer 属性的脚本在插入文档树后会执行），对于动态载入外部脚本文件的需求，会提供专门的方法，不应该使用本方法。</li></ul><p>在创建元素时，如果包含 table，建议写上 tbody 以确保结构严谨。举例如下：</p><p>$('&lt;div&gt;&lt;table&gt;&lt;tbody id=\"ranking\"&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;');</p><p>当参数为一个元素的 id 时，会返回扩展后的、与指定 id 相匹配的元素。</p><p>当参数本身即为一个元素时，会返回扩展后的该元素。</p><p>当参数为其他情况时（包括 document 和 window）均返回 null。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>扩展后的元素。</p>"}],"type":"Element","since":"","see":["http://jquery.com/","http://mootools.net/","http://w3help.org/zh-cn/causes/SD9003"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"document.$"},"TabPanel.options":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>默认选项。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"TabPanel.options"},"localStorage":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>为不支持 localStorage 的浏览器提供类似的功能。</p><p>注意：</p><p>在不支持 localStorage 的浏览器中，会使用路径 '/favicon.ico' 来创建启用 userData 的元素。</p><p>当上述路径不存在时 (404)，服务端应避免返回包含脚本的页面，以免出现预料外的异常。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"localStorage"},"Global.typeOf":{"requires":[],"parameters":[{"description":"<p>要判断的值。</p>","type":"*","name":"value","isOptional":false}],"isStatic":true,"description":"<p>判断提供的值的数据类型，比 typeof 运算符返回的结果更明确（将对结果为 'object' 的情况进行更细致的区分）。</p><p>注意：</p><p>一些特殊的对象，如 IE7 IE8 中的 XMLHttpRequest，是作为构造函数使用的，但使用本方法将得到 'object.Object' 的结果。考虑到需要判断这类对象的情况极为少见，因此未作处理。</p><p>IE6 IE7 IE8 中在试图访问某些对象提供的属性/方法时，如 new ActiveXObject('Microsoft.XMLHTTP').abort，将抛出“对象不支持此属性或方法”的异常，因此也无法使用本方法对其进行判断。但可以对其使用 typeof 运算符并得到结果 'unknown'。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>值的类型，可能为以下几种情况之一：</p><p>undefined</p><p>boolean</p><p>number</p><p>string</p><p>function</p><p>null</p><p>object.Boolean</p><p>object.Number</p><p>object.String</p><p>object.Array</p><p>object.Date</p><p>object.RegExp</p><p>object.Error</p><p>object.Math</p><p>object.JSON</p><p>object.Arguments</p><p>object.Global</p><p>object.Node</p><p>object.Collection</p><p>object.Object</p>"}],"type":"string","since":"","see":["http://mootools.net/","http://jquery.com/"],"fires":[],"deprecated":"","examples":["typeOf(document);\r// 'object.Node'"],"isFunction":true,"name":"Global.typeOf"},"Element.prototype.setData":{"requires":[],"parameters":[{"description":"<p>数据名，必须为 camelCase 形式，并且只能包含英文字母。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>数据值，必须为字符串。</p>","type":"string","name":"value","isOptional":false}],"isStatic":false,"description":"<p>在本元素中保存一条自定义数据。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.setData"},"Event.prototype.isMouseEvent":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>是否为鼠标事件。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.isMouseEvent"},"Element.prototype.getChildren":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本元素的所有子元素。</p>","isConstructor":false,"returns":[{"type":"Array","description":"<p>包含本元素的所有子元素的数组，数组内各元素的顺序为执行本方法时各元素在文档树中的顺序。</p>"}],"type":"Array","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getChildren"},"Event.prototype.offsetX":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在横向移动的偏移量，仅在 mousedragstart/mousedrag/mousedragend 类型的事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.offsetX"},"Event.prototype.timeStamp":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生的时间。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.timeStamp"},"Element.prototype.putAfter":{"requires":[],"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"isStatic":false,"description":"<p>将本元素放到目标元素之后。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.putAfter"},"Event.prototype.offsetY":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在纵向移动的偏移量，仅在 mousedragstart/mousedrag/mousedragend 类型的事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.offsetY"},"Element.prototype.addClass":{"requires":[],"parameters":[{"description":"<p>类名。</p>","type":"string","name":"className","isOptional":false}],"isStatic":false,"description":"<p>为本元素添加一个类名。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.addClass"},"Array.prototype.getFirst":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本数组的第一个元素。</p>","isConstructor":false,"returns":[{"type":"*","description":"<p>本数组的第一个元素。</p>"}],"type":"*","since":"","see":[],"fires":[],"deprecated":"","examples":["[0, 1, 2, 3, 4].getFirst();\r// 0"],"isFunction":true,"name":"Array.prototype.getFirst"},"Event.prototype.target":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>触发事件的对象。</p>","isConstructor":false,"returns":[],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.target"},"localStorage.setItem":{"requires":[],"parameters":[{"description":"<p>数据名，不能为空字符串。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>数据值。</p>","type":"string","name":"value","isOptional":false}],"isStatic":true,"description":"<p>在 localStorage 中保存一条数据。</p><p>注意：</p><p>与原生的 localStorage 不同，IE6 IE7 的实现不允许 `~!@#$%^&*() 等符号出现在 key 中，可以使用 . 和 _ 符号，但不能以 . 和数字开头。</p><p>可以使用中文 key。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"localStorage.setItem"},"Dialog":{"requires":[],"parameters":[{"description":"<p>要作为对话框显示的元素。</p>","type":"Element","name":"element","isOptional":false},{"description":"<p>可选参数，这些参数的默认值保存在 Dialog.options 中。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>为遮掩层元素附加的属性，默认为 {}。</p>","type":"Object","name":"options.maskAttributes","isOptional":false},{"description":"<p>为遮掩层元素设置的样式，默认为 {backgroundColor: 'black', opacity: 0.2}。</p>","type":"Object","name":"options.maskStyles","isOptional":false},{"description":"<p>对话框的左边与其父元素的左边的横向差值。默认为 undefined，此时对话框的中心点在横向将与其父元素的中心点重合。</p>","type":"number","name":"options.offsetX","isOptional":false},{"description":"<p>对话框的顶边与其父元素的顶边的纵向差值。默认为 undefined，此时对话框的中心点在纵向将与其父元素的中心点重合。</p>","type":"number","name":"options.offsetY","isOptional":false},{"description":"<p>是否启用淡入淡出的动画效果，默认为 false。</p><p>在 IE6 IE7 IE8 应关闭，否则动画使用的透明滤镜可能和 PNG 透明修复脚本冲突，或者因透明滤镜重叠而导致显示异常。</p>","type":"boolean","name":"options.effect","isOptional":false}],"isStatic":true,"description":"<p>模态对话框。</p><p>对话框的弹出位置、遮掩层遮盖的范围都是与对话框的父元素有关的。</p><p>对话框元素将以其父元素为“参考元素”进行定位，遮掩层也作为其父元素的子元素被创建。</p><p>如果对话框元素的父元素是 body，遮掩层将遮掩整个视口。</p><p>当对话框元素的父元素不是 body 时，应避免其父元素出现滚动条，以免对话框和遮掩层能随其内容滚动。</p><p>当多个对话框有相同的父元素时，则视这些对话框为一组，一组对话框可以重叠显示。</p><ul><li>对话框的默认状态为关闭。因此 element 的 display 将被设置为 none。</li><li>当对话框元素的父元素为 body 元素时，其 position 才可以选择设置 absolute 或 fixed，其余情况均会被重设为 absolute。</li><li>建议为该元素设置明确的 zIndex，如果未设置 zIndex，则自动设置 zIndex 为 1000。</li><li>如果对话框元素的父元素的 position 为 static，将修改其 position 为 relative，以使其创建 stacking context。</li></ul>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>成功调用 open 方法后触发。</p>","name":"open"},{"description":"<p>在对话框打开时触发。如果启用了动画效果，则在对话框打开动画开始播放后触发。</p>","name":"openstart"},{"description":"<p>在对话框打开后触发。如果启用了动画效果，则在对话框打开动画播放完成后触发。</p>","name":"openfinish"},{"description":"<p>成功调用 close 方法后触发。</p>","name":"close"},{"description":"<p>在对话框关闭时触发。如果启用了动画效果，则在对话框关闭动画开始播放后触发。</p>","name":"closestart"},{"description":"<p>在对话框关闭后触发。如果启用了动画效果，则在对话框关闭动画播放完成后触发。</p>","name":"closefinish"},{"description":"<p>成功调用 reposition 方法后触发。</p>","name":"reposition"}],"deprecated":"","examples":[],"isFunction":true,"name":"Dialog"},"Event.prototype.isKeyboardEvent":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>是否为键盘事件。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.isKeyboardEvent"},"Global.getNamespace":{"requires":[],"parameters":[{"description":"<p>命名空间的字符串形式。</p>","type":"string","name":"namespace","isOptional":false}],"isStatic":true,"description":"<p>获取一个命名空间，如果该命名空间不存在，将创建并返回这个命名空间。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>命名空间对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":["var finale = getNamespace('data.championship.finale');\rfinale.getRankingList = function() {...};"],"isFunction":true,"name":"Global.getNamespace"},"Element":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>为无 Element 构造函数的浏览器创建 Element 对象，以确保在各浏览器中都可以通过 Element.prototype 为元素扩展新特性。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element"},"String":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"String"},"navigator.isIElt10":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE，且版本小于 10。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIElt10"},"localStorage.clear":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>清空 localStorage 中的所有数据。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"localStorage.clear"},"Element.prototype.fadeOut":{"requires":[],"parameters":[{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位是毫秒，默认为 200。</p>","type":"number","name":"options.duration","isOptional":false},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeIn'。</p>","type":"string","name":"options.timingFunction","isOptional":false},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":false},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":false}],"isStatic":false,"description":"<p>让本元素播放一个淡出动画。</p><p>display 为 none 的元素不能播放淡出动画。</p><p>如果本元素的动画播放列表中已经存在一个 fadeIn 动画，则反向播放前者，并删除前者的 onFinish 回调，执行后者的 onStart 回调，并在反向播放结束时执行后者的 onFinish 回调。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.fadeOut"},"Switcher":{"requires":[],"parameters":[{"description":"<p>指定在本数组中的各元素间切换，本数组包含的元素必须是引用类型的值，且不能有重复。</p>","type":"Array","name":"items","isOptional":false}],"isStatic":true,"description":"<p>使用一个数组创建切换控制器。在这个数组中，同一时刻最多只有一个元素是“活动”的。</p><p>动态修改实例对象的 items 属性的内容，可以随时增加/减少切换控制器的控制范围。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>{Element} event.activeItem 当前的活动元素。</p><p>{number} event.activeIndex 当前的活动元素在 items 中的索引。</p><p>{Element} event.inactiveItem 上一个活动元素。</p><p>{number} event.inactiveIndex 上一个活动元素在 items 中的索引。</p><p>成功调用 active 方法后触发。</p>","name":"active"}],"deprecated":"","examples":[],"isFunction":true,"name":"Switcher"},"Animation.createBasicRenderer":{"requires":[],"parameters":[{"description":"<p>渲染函数，传入两个参数“时间轴”和“偏移量”。</p><p>该函数被调用时 this 的值为所属的 Animation 对象。</p>","type":"Function","name":"renderer","isOptional":false}],"isStatic":true,"description":"<p>创建基本渲染器。</p>","isConstructor":false,"returns":[{"type":"Function","description":"<p>生成的渲染器。</p>"}],"type":"Function","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Animation.createBasicRenderer"},"navigator.inStandardsMode":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>是否工作在标准模式下。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.inStandardsMode"},"Date":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Date"},"TabPanel.prototype.active":{"requires":[],"parameters":[{"description":"<p>要激活的“标签面板”的“标签”元素、“面板”元素或它们在各自所属的数组（tabs 和 panels）中的索引值。</p><p>从 tabs 和 panels 中计算的，默认激活的某组“标签面板”的索引值从 0 开始。</p><p>如果指定的值为不在 tabs 或 panels 中的对象，或为一个不在有效范索引围内的数字，则取消激活的“标签面板”。</p>","type":"Element|number","name":"value","isOptional":false}],"isStatic":false,"description":"<p>激活一组“标签面板”。</p><p>如果要激活的“标签面板”已在激活状态，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>TabPanel 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"TabPanel.prototype.active"},"Animation.prototype.stop":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>停止动画，并将动画的时间点复位至起点。</p><p>调用此方法时，动画中所有的剪辑都将回到起点状态。</p><p>如果当前动画的时间点在起点，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Animation 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Animation.prototype.stop"},"window":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>扩展 DOMWindow 对象。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"window"},"Date.prototype.format":{"requires":[],"parameters":[{"description":"<p>由代表日期字段的标志符和其他字符组成的格式字符串，默认为 'YYYY-MM-DD'。</p><p>各标志符及其含义：</p><table><tr><th>字符</th><th>含义</th></tr><tr><td>YYYY</td><td>四位数年份。</td></tr><tr><td>MM</td><td>两位数月份。</td></tr><tr><td>DD</td><td>两位数日期。</td></tr><tr><td>hh</td><td>两位数小时，24 小时制。</td></tr><tr><td>mm</td><td>两位数分钟。</td></tr><tr><td>ss</td><td>两位数秒钟。</td></tr><tr><td>s</td><td>三位数毫秒。</td></tr><tr><td>TZD</td><td>时区指示。世界标准时间显示大写字母 Z，其他时区用当地时间加时差表示。</td></tr></table>","type":"string","name":"pattern","isOptional":true},{"description":"<p>是否格式化为世界标准时间。</p>","type":"boolean","name":"toUTC","isOptional":true}],"isStatic":false,"description":"<p>将日期格式化为字符串。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>格式化后的字符串。</p>"}],"type":"string","since":"","see":["http://www.w3.org/TR/NOTE-datetime","http://en.wikipedia.org/wiki/ISO_8601","http://blog.stevenlevithan.com/archives/date-time-format"],"fires":[],"deprecated":"","examples":["new Date(2000,0,1).format()\r// \"2000-01-01\"\rnew Date(2000,2,1).format('MM-DD hh:mm', true)\r// \"02-29 16:00\"\rnew Date('Fri, 21 Dec 2012 15:14:35 GMT').format('YYYY-MM-DDThh:mm:ss.sTZD')\r// \"2012-12-21T23:14:35.000+08:00\"\rnew Date(2012, 0, 1).format('YYYYYY')\r// 未被成功匹配的字符均会作为普通字符显示。\r// \"2012YY\""],"isFunction":true,"name":"Date.prototype.format"},"Array.from":{"requires":[],"parameters":[{"description":"<p>要转化为数组的对象。</p>","type":"*","name":"arrayish","isOptional":false}],"isStatic":true,"description":"<p>将类数组对象转化为数组，如果该对象不是一个类数组对象，则返回一个仅包含该对象的数组。</p>","isConstructor":false,"returns":[{"type":"Array","description":"<p>转化后的数组。</p>"}],"type":"Array","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Array.from"},"Paginator.prototype.render":{"requires":[],"parameters":[{"description":"<p>当前页码。</p>","type":"number","name":"currentPage","isOptional":false},{"description":"<p>总页数。</p>","type":"number","name":"totalPage","isOptional":false}],"isStatic":false,"description":"<p>根据当前页和总页数渲染分页导航条。</p><p>如果 currentPage 和 totalPage 与当前页码和总页数相同，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Paginator 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Paginator.prototype.render"},"Boolean":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Boolean"},"Number.isInteger":{"requires":[],"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"isStatic":true,"description":"<p>检查提供的值是否为整数。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.isinteger"],"fires":[],"deprecated":"","examples":["Number.isInteger(9007199254740992);\r// false"],"isFunction":true,"name":"Number.isInteger"},"String.prototype.toJSON":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>将字符串转换为 JSON 格式的字符串。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"String.prototype.toJSON"},"Element.prototype.removeData":{"requires":[],"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"isStatic":false,"description":"<p>从本元素中删除一条自定义数据。</p><p>注意：</p><p>IE6 IE7 在 removeAttribute 时，key 参数是大小写敏感的。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.removeData"},"window.getClientSize":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>获取视口可视区域的尺寸。</p><p>IE9 Firefox Chrome Safari Opera 有 window.innerWidth 和 window.innerHeight 属性，但这个值是包含了滚动条宽度的值。</p><p>为保持一致性，不使用这两个属性来获取文档可视区域尺寸。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>尺寸，包含 width 和 height 两个数字类型的属性，单位为像素。</p>"}],"type":"Object","since":"","see":["http://www.w3.org/TR/cssom-view/#dom-window-innerwidth","http://www.w3.org/TR/cssom-view/#dom-window-innerheight"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"window.getClientSize"},"Element.prototype.morph":{"requires":[],"parameters":[{"description":"<p>目标样式，元素将向指定的目标样式渐变。目标样式包含一条或多条要设置的样式声明，与 setStyles 的参数的差异如下：</p><p>1. 不能使用复合属性。  // TODO: 待支持。</p><p>2. lineHeight 仅支持 'px' 单位的长度设置，而不支持数字。</p>","type":"Object","name":"styles","isOptional":false},{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位是毫秒，默认为 400。</p>","type":"number","name":"options.duration","isOptional":false},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'ease'。</p>","type":"string","name":"options.timingFunction","isOptional":false},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":false},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":false}],"isStatic":false,"description":"<p>让本元素播放一个渐变动画。</p><p>如果本元素的动画播放列表中已经存在一个 morph 动画，则停止旧的，播放新的。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.morph"},"Math":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Math"},"Math.limit":{"requires":[],"parameters":[{"description":"<p>输入的数字。</p>","type":"number","name":"number","isOptional":false},{"description":"<p>允许的数字下限。</p>","type":"number","name":"min","isOptional":false},{"description":"<p>允许的数字上限。</p>","type":"number","name":"max","isOptional":false}],"isStatic":true,"description":"<p>将输入数字限制于 min 和 max 之间（包含 min 和 max）。</p>","isConstructor":false,"returns":[{"type":"number","description":"<p>输出的数字。</p>"}],"type":"number","since":"","see":["http://mootools.net/"],"fires":[],"deprecated":"","examples":["Math.limit(100, 0, 80);\r// 80\rMath.limit(NaN, 0, 80);\r// 0"],"isFunction":true,"name":"Math.limit"},"Paginator":{"requires":[],"parameters":[{"description":"<p>相关元素。</p>","type":"Object","name":"elements","isOptional":false},{"description":"<p>“上一页”按钮。</p>","type":"Element","name":"elements.prev","isOptional":false},{"description":"<p>“下一页”按钮。</p>","type":"Element","name":"elements.next","isOptional":false},{"description":"<p>页码的容器，用于容纳每次渲染后生成的页码元素。</p>","type":"Element","name":"elements.pages","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>在导航条的两端显示的最多页码数量，默认为 1。</p>","type":"number","name":"options.edgeEntries","isOptional":false},{"description":"<p>在当前页码的两侧显示的最多页码数量，默认为 2。</p>","type":"number","name":"options.sideEntries","isOptional":false},{"description":"<p>为禁用的翻页按钮添加的类名，默认为 'disabled'。</p>","type":"string","name":"options.disabledClassName","isOptional":false},{"description":"<p>为当前页码添加的类名，默认为 'current'。</p>","type":"string","name":"options.currentClassName","isOptional":false}],"isStatic":true,"description":"<p>分页导航条。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>{number} number 目标页码。</p><p>成功调用 turn 方法后触发。</p>","name":"turn"},{"description":"<p>{number} currentPage 当前页码。</p><p>{number} totalPage 总页数。</p><p>成功调用 render 方法后触发。</p>","name":"render"}],"deprecated":"","examples":[],"isFunction":true,"name":"Paginator"},"Slideshow.prototype.show":{"requires":[],"parameters":[{"description":"<p>要显示的“幻灯片”元素、“指示器”元素或它们在各自所属的数组（slides 和 pointers）中的索引值。</p>","type":"Element|number","name":"value","isOptional":false}],"isStatic":false,"description":"<p>显示一张“幻灯片”。</p><p>如果要显示的“幻灯片”与当前显示的“幻灯片”相同，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Slideshow 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Slideshow.prototype.show"},"Animation.prototype.pause":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>暂停动画。</p><p>仅在动画处于“播放”或“反向播放”状态时，调用此方法才有效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Animation 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Animation.prototype.pause"},"Math.randomRange":{"requires":[],"parameters":[{"description":"<p>要获取的随机数的下限，整数。</p>","type":"number","name":"min","isOptional":false},{"description":"<p>要获取的随机数的上限，整数。</p>","type":"number","name":"max","isOptional":false}],"isStatic":true,"description":"<p>生成介于 min 和 max 之间（包含 min 和 max）的伪随机整数。</p>","isConstructor":false,"returns":[{"type":"number","description":"<p>生成的伪随机整数。</p>"}],"type":"number","since":"","see":["http://mootools.net/"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Math.randomRange"},"Request":{"requires":[],"parameters":[{"description":"<p>请求地址。</p>","type":"string","name":"url","isOptional":false},{"description":"<p>可选参数，这些参数的默认值保存在 Request.options 中。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>用户名，默认为空字符串，即不指定用户名。</p>","type":"string","name":"options.username","isOptional":false},{"description":"<p>密码，默认为空字符串，即不指定密码。</p>","type":"string","name":"options.password","isOptional":false},{"description":"<p>请求方法，默认为 'get'。</p>","type":"string","name":"options.method","isOptional":false},{"description":"<p>要设置的 request headers，格式为 {key: value, ...} 的对象，默认为 {'X-Requested-With': 'XMLHttpRequest', 'Accept': '*&#47;*'}。</p>","type":"Object","name":"options.headers","isOptional":false},{"description":"<p>发送数据的内容类型，默认为 'application/x-www-form-urlencoded'，method 为 'post' 时有效。</p>","type":"string","name":"options.contentType","isOptional":false},{"description":"<p>是否允许浏览器的缓存生效，默认为 true。</p>","type":"boolean","name":"options.useCache","isOptional":false},{"description":"<p>是否使用异步方式，默认为 true。</p>","type":"boolean","name":"options.async","isOptional":false},{"description":"<p>请求最短时间，单位为 ms，默认为 undefined，即无最短时间限制，async 为 true 时有效。</p>","type":"number","name":"options.minTime","isOptional":false},{"description":"<p>请求超时时间，单位为 ms，默认为 undefined，即无超时时间限制，async 为 true 时有效。</p>","type":"number","name":"options.maxTime","isOptional":false},{"description":"<p>请求数据解析器，传入请求数据，该函数应返回解析后的字符串数据，默认将请求数据转换为字符串，若请求数据为空则转换为空字符串。</p><p>原始请求数据无特殊要求。</p><p>解析后的请求数据应该是一个字符串，并且该字符串会被赋予 start 事件对象的 data 属性。</p><p>该函数被调用时 this 的值为本组件。</p>","type":"Function","name":"options.requestParser","isOptional":false},{"description":"<p>响应数据解析器，传入响应数据，该函数应返回解析后的对象数据，默认无特殊处理。</p><p>原始响应数据中包含以下属性：</p><p>{number} responseData.status 状态码。</p><p>{string} responseData.statusText 状态描述。</p><p>{Object} responseData.headers 响应头。</p><p>{string} responseData.text 响应文本。</p><p>{XMLDocument} responseData.xml 响应 XML 文档。</p><p>解析后的响应数据无特殊要求，但要注意，解析后的数据对象的属性将被追加到 finish 事件对象中。</p><p>该函数被调用时 this 的值为本组件。</p>","type":"Function","name":"options.responseParser","isOptional":false}],"isStatic":true,"description":"<p>对一个指定的资源发起请求，并获取响应数据。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>{Object} event.data 要发送的数据。</p><p>成功调用 send 方法后，解析请求数据前触发。</p>","name":"send"},{"description":"<p>{Object} event.data 解析后的请求数据。</p><p>解析请求数据后，开始发送请求前触发。</p>","name":"start"},{"description":"<p>{*} event.* 解析后的响应数据。</p><p>请求结束并解析响应数据后触发。</p><p>只要调用了 send 方法就必然会触发此事件，在调用 abort 方法取消请求，或请求超时的情况下，也会收到模拟的响应数据并传入 responseParser，此时的状态码分别为 -498 和 -408。</p><p>这样设计的好处是在请求结束时可以统一处理一些状态的设定或恢复，如将 start 事件监听器中显示的提示信息隐藏。</p>","name":"finish"},{"description":"<p>成功调用 abort 方法后触发。</p>","name":"abort"}],"deprecated":"","examples":[],"isFunction":true,"name":"Request"},"Request.prototype.send":{"requires":[],"parameters":[{"description":"<p>要发送的数据。</p>","type":"Object","name":"requestData","isOptional":true}],"isStatic":false,"description":"<p>发送请求。</p><p>如果上一次发送的请求尚未完成，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Request 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Request.prototype.send"},"Date.from":{"requires":[],"parameters":[{"description":"<p>代表日期的字符串，该字符串应该能够通过 Date.prototype.format 生成。</p><p>日期字符串中缺失的部分将使用默认值代替，各部分的默认值如下：</p><table><tr><th>日期字段</th><th>默认值</th></tr><tr><td>年</td><td>2012</td></tr><tr><td>月</td><td>1</td></tr><tr><td>日</td><td>1</td></tr><tr><td>时</td><td>0</td></tr><tr><td>分</td><td>0</td></tr><tr><td>秒</td><td>0</td></tr><tr><td>毫秒</td><td>0</td></tr><tr><td>时区</td><td>当地时区</td></tr></table><p>注意：未检查字符串内包含数据的有效性，若数据异常，将得不到预期的日期值。</p>","type":"string","name":"string","isOptional":false},{"description":"<p>由代表日期字段的标志符和其他字符组成的格式字符串，默认为 'YYYY-MM-DD'。格式请参考 Date.prototype.format 的同名参数。</p>","type":"string","name":"pattern","isOptional":true},{"description":"<p>字符串是否为世界标准时间。</p><p>当 isUTC 与 string 中已存在的 TZD 标识冲突时，isUTC 将被忽略。</p>","type":"boolean","name":"isUTC","isOptional":true}],"isStatic":true,"description":"<p>将符合某种格式的字符串转换为日期。</p>","isConstructor":false,"returns":[{"type":"Date","description":"<p>转换后的日期。</p>"}],"type":"Date","since":"","see":[],"fires":[],"deprecated":"","examples":["Date.from('2012-06-25 12:00:00', 'YYYY-MM-DD hh:mm:ss')\r// 各浏览器中日期的字符串形式略有差异。\r// \"Mon Jun 25 2012 12:00:00 GMT+0800\"\rDate.from('2012-12-21T23:14:35.000+08:00', 'YYYY-MM-DDThh:mm:ss.sTZD', true).format('世界标准时间YYYY年MM月DD日hh点mm分ss秒', true)\r// \"世界标准时间2012年12月21日15点14分35秒\"\rDate.from('02-29 16:00', 'MM-DD hh:mm')\r// 年份缺失，使用默认值代替。\r// \"Wed Feb 29 2012 16:00:00 GMT+0800\""],"isFunction":true,"name":"Date.from"},"location":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>扩展 location 对象。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"location"},"Element.prototype.getStyles":{"requires":[],"parameters":[{"description":"<p>指定要获取的特性名，可以为任意个。</p>","type":"Array","name":"propertyNames","isOptional":false}],"isStatic":false,"description":"<p>获取本元素的“计算后的样式”中一组特性的值。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>包含一组特性值的，格式为 {propertyName: propertyValue, ...} 的对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getStyles"},"Event.prototype.isPropagationStopped":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>查询事件的传递是否已被阻止。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>查询结果。</p>"}],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Event.prototype.isPropagationStopped"},"Element.prototype.fire":{"requires":[],"parameters":[{"description":"<p>事件类型。</p>","type":"String","name":"type","isOptional":false},{"description":"<p>在事件对象上附加的数据。</p><p>data 的属性会被追加到事件对象中，但名称为 originalEvent 的属性除外。</p>","type":"Object","name":"data","isOptional":true}],"isStatic":false,"description":"<p>触发本元素的某类事件，运行相关的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.fire"},"Element.prototype.setStyles":{"requires":[],"parameters":[{"description":"<p>包含一条或多条要设置的样式声明，格式为 {propertyName: propertyValue, ...} 的对象。</p>","type":"Object","name":"declarations","isOptional":false}],"isStatic":false,"description":"<p>为本元素设置一组行内样式声明。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.setStyles"},"Element.prototype.getParent":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本元素的父元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素的父元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getParent"},"Event.prototype.stopPropagation":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>阻止事件的传递，被阻止传递的事件将不会向其他元素传递。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Event.prototype.stopPropagation"},"Element.prototype.getFirst":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本元素的第一个子元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素的第一个子元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getFirst"},"Event.prototype.which":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>当一个设备触发事件时的相关代码。在键盘事件中为按下的键的代码。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.which"},"Event.prototype.shiftKey":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时，shift 键是否被按下。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.shiftKey"},"Array.prototype.indexOf":{"requires":[],"parameters":[{"description":"<p>指定的值。</p>","type":"*","name":"searchElement","isOptional":false},{"description":"<p>从指定索引为起始点开始查找，默认为 0。</p><p>如果指定的值大于数组的长度，则使用数组的长度作为查找起始点。</p><p>如果指定一个负数，则表示从数组的末尾开始计算的偏移量，即使用 (fromIndex + 数组的长度) 作为查找起始点，如果这个结果仍为负数，则使用 0 作为查找起始点。</p>","type":"number","name":"fromIndex","isOptional":true}],"isStatic":false,"description":"<p>返回数组中第一次出现指定的值的索引。</p>","isConstructor":false,"returns":[{"type":"number","description":"<p>索引值，如果数组中不包含指定的值，则返回 -1。</p>"}],"type":"number","since":"","see":["http://es5.github.com/#x15.4.4.14","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf"],"fires":[],"deprecated":"","examples":["[1, 2, 3, 2, 1].indexOf(2);\r// 1\r[1, 2, 3, 2, 1].indexOf(2, 2);\r// 3\r[1, 2, 3, 2, 1].indexOf(2, -3)\r// 3\r[1, 2, 3, 2, 1].indexOf(8)\r// -1"],"isFunction":true,"name":"Array.prototype.indexOf"},"Element.prototype.on":{"requires":[],"parameters":[{"description":"<p>事件名称，格式为 <dfn><var>type</var>.<var>label</var>:relay(<var>selector</var>)</dfn>，详细信息请参考下表。</p><p>使用逗号分割多个事件名称，即可同时为多个事件注册同一个监听器。</p><p>对于为不保证所有浏览器均可以冒泡的事件类型指定了代理监听的情况，会给出警告信息。</p><table><tr><th></th><th>是否必选</th><th>详细描述</th></tr><tr><td><dfn><var>type</var></dfn></td><td>必选</td><td>要监听的事件类型</td></tr><tr><td><dfn>.<var>label</var></dfn></td><td>可选</td><td>给事件类型加上标签，以便调用 off 方法时精确匹配要删除的事件监听器。<br>不打算删除的事件监听器没有必要指定标签。</td></tr><tr><td><dfn>:relay(<var>selector</var>)</dfn></td><td>可选</td><td>用于指定对本元素的后代元素中符合 selector 要求的元素代理事件监听。<br>这种情况下，在事件发生时，将认为事件是由被代理的元素监听到的，而不是本元素。</td></tr></table>","type":"string","name":"name","isOptional":false},{"description":"<p>事件监听器。</p><p>该函数将在对应的事件发生时被调用，传入事件对象作为参数。</p><p>该函数被调用时 this 的值为监听到本次事件的元素，即：</p><ul><li>如果是普通监听器，则 this 的值为本元素。</li><li>如果是代理监听器，则 this 的值为被代理的元素。</li></ul><p>如果该函数返回 false，则相当于调用了传入的事件对象的 stopPropagation 和 preventDefault 方法。</p>","type":"Function","name":"listener","isOptional":false}],"isStatic":false,"description":"<p>为本元素添加事件监听器。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":["http://mootools.net/","http://www.quirksmode.org/dom/events/index.html"],"fires":[],"deprecated":"","examples":["$('#test').on('click', onClick);\r// 为 id 为 test 的元素添加 click 事件监听器。","$('#test').on('click.temp', onClick);\r// 为 id 为 test 的元素添加 click 事件监听器，并为其指定一个标签 temp。","$('#test').on('click:relay(a)', onClick);\r// 为 id 为 test 的元素添加一个代理事件监听器，为该元素所有的后代 a 元素代理 click 事件的监听。"],"isFunction":true,"name":"Element.prototype.on"},"Object.forEach":{"requires":[],"parameters":[{"description":"<p>要遍历的对象。</p>","type":"Object","name":"object","isOptional":false},{"description":"<p>用来遍历的函数，参数为 value，key，object。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"isStatic":true,"description":"<p>遍历一个对象。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Object.forEach"},"String.prototype.contains":{"requires":[],"parameters":[{"description":"<p>指定的子串。</p>","type":"string","name":"subString","isOptional":false}],"isStatic":false,"description":"<p>检查字符串是否包含指定的子串。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"fires":[],"deprecated":"","examples":["'abcdefg'.contains('cd');\r// true"],"isFunction":true,"name":"String.prototype.contains"},"Paginator.prototype.turn":{"requires":[],"parameters":[{"description":"<p>目标页码。</p>","type":"number","name":"number","isOptional":false}],"isStatic":false,"description":"<p>跳转页码。</p><p>如果目标页码与当前页码相同，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Paginator 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Paginator.prototype.turn"},"Element.prototype.putBefore":{"requires":[],"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"isStatic":false,"description":"<p>将本元素放到目标元素之前。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.putBefore"},"Event.prototype.isDefaultPrevented":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>查询事件的默认行为是否已被阻止。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>查询结果。</p>"}],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Event.prototype.isDefaultPrevented"},"Array.prototype.map":{"requires":[],"parameters":[{"description":"<p>对数组中的每个元素都执行一次的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"isStatic":false,"description":"<p>对数组中的每一个元素都执行一次回调函数，并返回一个包含这个回调函数的每次执行后的返回值的新数组。</p>","isConstructor":false,"returns":[{"type":"Array","description":"<p>包含 callback 的每次执行后的返回值的新数组。</p>"}],"type":"Array","since":"","see":["http://es5.github.com/#x15.4.4.19","https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map"],"fires":[],"deprecated":"","examples":["var a = [1, 2, 3].map(function(item) {\r  return item + 10;\r});\ra;\r// [11, 12, 13]"],"isFunction":true,"name":"Array.prototype.map"},"Global.runApplication":{"requires":[],"parameters":[{"description":"<p>应用函数。</p>","type":"Function","name":"applicationFunction","isOptional":false},{"description":"<p>设置为 true 则在 DOM 树加载完成后再执行应用函数，否则立即执行。</p>","type":"boolean","name":"waitingForDomReady","isOptional":true}],"isStatic":true,"description":"<p>运行应用。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Global.runApplication"},"Dialog.prototype.close":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>关闭对话框。</p><p>如果对话框正在关闭或已经关闭，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Dialog 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Dialog.prototype.close"},"Event.prototype.altKey":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时，alt 键是否被按下。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.altKey"},"Component":{"requires":[],"parameters":[{"description":"<p>组件的初始化函数。</p>","type":"Function","name":"initialization","isOptional":false},{"description":"<p>组件的默认选项。</p><p>如果省略，则认为该组件没有默认选项。可以在创建组件构造器之后再设置其 options 属性以更改其默认选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>组件的原型对象。</p><p>可以在创建组件构造器之后再扩充其 prototype 属性以添加其实例方法。</p>","type":"Object","name":"prototype","isOptional":true}],"isStatic":true,"description":"<p>创建一个组件构造器。</p><p>组件的实例将具备选项设置和事件处理的功能。</p><p>组件的实例及其原型对象中都不能设置以下属性：</p><p>'options'，'events'，'setOptions'，'on'，'off'，'fire'。</p><p>修改一个组件的默认选项时，应修改该组件的 options 属性的属性值，不要为 options 属性重新赋值。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Component"},"Dialog.prototype.reposition":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>重新定位对话框位置。</p><p>仅在对话框处于“打开”状态时，调用此方法才有效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Dialog 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Dialog.prototype.reposition"},"Validator.prototype.validate":{"requires":[],"parameters":[{"description":"<p>要验证的表单域的名称，若省略则验证所有已配置规则的表单域。</p>","type":"string","name":"fieldName","isOptional":true}],"isStatic":false,"description":"<p>对配置的所有规则进行验证。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>验证结果，true 为验证通过，false 为验证失败。</p>"}],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Validator.prototype.validate"},"String.prototype.repeat":{"requires":[],"parameters":[{"description":"<p>要重复的次数。</p>","type":"number","name":"count","isOptional":false}],"isStatic":false,"description":"<p>将字符串重复指定的次数。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>重复指定次数后的字符串。</p>"}],"type":"string","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string.prototype.repeat"],"fires":[],"deprecated":"","examples":["'*'.repeat(5);\r// '*****'"],"isFunction":true,"name":"String.prototype.repeat"},"Event":{"requires":[],"parameters":[{"description":"<p>原始事件对象。</p>","type":"Object","name":"e","isOptional":false},{"description":"<p>事件类型。</p>","type":"string","name":"type","isOptional":false}],"isStatic":true,"description":"<p>事件包装对象。</p><p>当事件对象通过调用 Element/document/window 的 fire 方法传递到监听器时，其属性可能会被重写。</p><p>在一些需要获取浏览器提供的真实事件属性时，可以通过事件对象的 originalEvent.type 属性来辨别事件的真实类型，由上述 fire 方法生成的事件对象的对应属性为空字符串。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Event"},"window.getScrollSize":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>获取视口滚动区域的尺寸。当内容不足以充满视口可视区域时，返回视口可视区域的尺寸。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>尺寸，包含 width 和 height 两个数字类型的属性，单位为像素。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"window.getScrollSize"},"window.on":{"requires":[],"parameters":[{"description":"<p>事件名称，格式请参考 Element.prototype.on 的同名参数。</p>","type":"string","name":"name","isOptional":false},{"description":"<p>事件监听器，细节请参考 Element.prototype.on 的同名参数。</p>","type":"Function","name":"listener","isOptional":false}],"isStatic":true,"description":"<p>为 window 添加事件监听器。</p><p>特殊事件：beforeunload</p><ul><li>该事件只能存在一个监听器，因此不能使用标签。</li><li>不会有事件对象作为参数传入监听器。</li><li>如果添加了多个监听器，则只有最后添加的生效。</li><li>可以删除当前生效的监听器。</li></ul>","isConstructor":false,"returns":[{"type":"Object","description":"<p>window 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"window.on"},"navigator.userAgentInfo.name":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器名称，值为以下之一：IE|Firefox|Chrome|Safari|Opera。</p>","isConstructor":false,"returns":[],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.userAgentInfo.name"},"Request.prototype.abort":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>取消请求。</p><p>仅在一次异步模式的请求正在进行时，调用此方法才有效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Request 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Request.prototype.abort"},"Dialog.prototype.open":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>打开对话框。</p><p>如果对话框正在打开或已经打开，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Dialog 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Dialog.prototype.open"},"Date.prototype.toJSON":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>将日期转换为 JSON 格式的字符串。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Date.prototype.toJSON"},"window.getPageOffset":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>获取视口的滚动偏移量。</p><p>一些浏览器支持 window.scrollX/window.scrollY 或 window.pageXOffset/window.pageYOffset 直接获取视口的滚动偏移量。</p><p>这里使用通用性更强的方法实现。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>坐标，包含 x 和 y 两个数字类型的属性，单位为像素。</p>"}],"type":"Object","since":"","see":["http://w3help.org/zh-cn/causes/BX9008"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"window.getPageOffset"},"Element.prototype.prepend":{"requires":[],"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"isStatic":false,"description":"<p>将目标元素追加为本元素的第一个子元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.prepend"},"Element.prototype.getChildCount":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本元素的子元素的总数。</p>","isConstructor":false,"returns":[{"type":"number","description":"<p>本元素的子元素的总数。</p>"}],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getChildCount"},"Array.prototype.every":{"requires":[],"parameters":[{"description":"<p>用来检查的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p><p>回调函数返回 true 表示当前元素通过检查，反之表示未通过检查。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"isStatic":false,"description":"<p>检查数组中的所有元素是否都符合某个条件。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://es5.github.com/#x15.4.4.16","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every"],"fires":[],"deprecated":"","examples":["[1, 2, 3].every(function(item) {\r  return item < 5;\r});\r// true"],"isFunction":true,"name":"Array.prototype.every"},"location.parameters":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>获取当前页面的 Query String 中携带的所有参数。</p><p>注意：</p><p>当地址栏的字符有非 ASCII 字符，或有非法的查询字符串时，会有兼容性问题。</p>","isConstructor":false,"returns":[],"type":"Object","since":"","see":["http://w3help.org/zh-cn/causes/HD9001"],"fires":[],"deprecated":"","examples":["// 设页面地址为 test.html?a=ok&b=100&b=128\rlocation.parameters\r// {a:'ok', b:['100', '128']}"],"isFunction":false,"name":"location.parameters"},"Animation.prototype.reverse":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>反向播放动画。</p><p>如果当前动画正在反向播放中，或时间点已到达起点，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Animation 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Animation.prototype.reverse"},"Component.prototype.setOptions":{"requires":[],"parameters":[{"description":"<p>新的选项。新的选项用于覆盖旧的选项，因此旧选项中原本不存在的属性不会被设置。</p>","type":"Object","name":"options","isOptional":false}],"isStatic":false,"description":"<p>为本组件设置选项。</p><p>共有三种方式为一个组件设置选项：</p><ul><li>在在创建组件实例之前，可以修改该组件的构造器的 options 属性，来修改此类组件的默认选项。这种方式设置的选项对后续创建的组件均生效。<br>建议在项目对某一类组件有相同的要求时这么做。</li><li>在创建组件实例时，可以通过参数 options 来指定本次创建的实例的选项。这种方式设置的选项仅对本次创建的实例生效。<br>建议在创建每个组件的实例时这么做。</li><li>使用本方法，可以在实例创建之后修改当前的选项。这种方式设置的选项将在组件下一次访问这些设置时生效。<br>仅在需要重用某一个组件，但需要不同的选项时才这么做。</li></ul>","isConstructor":false,"returns":[{"type":"Object","description":"<p>本组件。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Component.prototype.setOptions"},"Request.options":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>默认选项。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Request.options"},"Date.now":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>获取系统当前的时间戳。</p>","isConstructor":false,"returns":[{"type":"number","description":"<p>系统当前的时间戳。</p>"}],"type":"number","since":"","see":["http://es5.github.com/#x15.9.4.4"],"fires":[],"deprecated":"","examples":["Date.now() === new Date().getTime();\r// true"],"isFunction":true,"name":"Date.now"},"Number.prototype.padZero":{"requires":[],"parameters":[{"description":"<p>数字总位数（包括整数位和小数位），当数字实际位数小于指定的数字总位数时，会在左侧补零。</p>","type":"number","name":"digits","isOptional":false}],"isStatic":false,"description":"<p>在数字左侧补零，以使数字更整齐。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>补零后的数字、NaN、Infinity 或 -Infinity 的字符形式。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Number.prototype.padZero"},"Component.prototype.fire":{"requires":[],"parameters":[{"description":"<p>事件类型。</p>","type":"String","name":"type","isOptional":false},{"description":"<p>在事件对象上附加的数据。</p>","type":"Object","name":"data","isOptional":true}],"isStatic":false,"description":"<p>触发本组件的某类事件，运行相关的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>本组件。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Component.prototype.fire"},"Element.prototype.getClientRect":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本元素的 border-box 在视口中的坐标。</p><p>注意：</p><p>不考虑非标准模式。</p><p>标准模式下 IE7(IE9 模拟) 的 body 的计算样式 direction: rtl 时，如果 html 设置了边框，则横向坐标获取仍不准确。由于极少出现这种情况，此处未作处理。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>包含位置（left、right、top、bottom）及尺寸（width、height）的对象，所有属性值均为 number 类型，单位为像素。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getClientRect"},"Event.prototype.stopImmediatePropagation":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>立即阻止事件的传递，被立即阻止传递的事件不仅不会向其他元素传递，也不会在当前元素上触发其他事件监听器。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Event.prototype.stopImmediatePropagation"},"TabPanel":{"requires":["Switcher"],"parameters":[{"description":"<p>相关元素。</p>","type":"Object","name":"elements","isOptional":false},{"description":"<p>包含所有“标签”的数组。组成“标签”的各元素的标签名应该一致，并且有共同的父元素。</p>","type":"Array","name":"elements.tabs","isOptional":false},{"description":"<p>包含所有“面板”的数组，应确保 panels 的数量和 tabs 的数量一致。</p>","type":"Array","name":"elements.panels","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>为激活的“标签”和“面板”添加的类名，默认为 'active'。</p>","type":"string","name":"options.activeClassName","isOptional":false},{"description":"<p>以毫秒为单位的“标签”鼠标悬停激活延时，默认为 undefined，此时由鼠标点击事件激活。若要启用鼠标悬停激活，建议设置为 200 - 400 之间的数值。</p>","type":"number","name":"options.hoverDelay","isOptional":false}],"isStatic":true,"description":"<p>多页标签面板。</p><p>“标签”和“面板”必须按顺序一一对应，保存在参数 tabs 和 panels 中。</p><p>一个“标签”和一个“面板”组成一组“标签面板”。</p><p>同一时刻最多只有一组“标签面板”被激活。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>{Element} activeTab 当前的激活的“标签”。</p><p>{Element} activePanel 当前的激活的“面板”。</p><p>{number} activeIndex 当前的激活的“标签”和“面板”在 tabs 和 panels 中的索引。</p><p>{Element} inactiveTab 上一个激活的“标签”。</p><p>{Element} inactivePanel 上一个激活的“面板”。</p><p>{number} inactiveIndex 上一个激活的“标签”和“面板”在 tabs 和 panels 中的索引。</p><p>成功调用 active 方法后触发。</p>","name":"active"}],"deprecated":"","examples":[],"isFunction":true,"name":"TabPanel"},"Object.append":{"requires":[],"parameters":[{"description":"<p>原始对象。</p>","type":"Object","name":"original","isOptional":false},{"description":"<p>追加对象，其 properties 会被复制到 original 中。</p>","type":"Object","name":"appending","isOptional":false},{"description":"<p>过滤要复制的 appending 的 properties 的名单。</p>","type":"Object","name":"filter","isOptional":true},{"description":"<p>仅在 appending 中的 key 包含于 whiteList 时，对应的 property 才会被复制到 original 中。</p>","type":"Array","name":"filter.whiteList","isOptional":false},{"description":"<p>如果 appending 中的 key 包含于 blackList，则对应的 property 不会被复制到 original 中。</p><p>如果 blackList 与 whiteList 有重复元素，则 whiteList 中的该元素将被忽略。</p>","type":"Array","name":"filter.blackList","isOptional":false}],"isStatic":true,"description":"<p>为一个对象追加另一个对象自身（不包含原型链）的 properties。</p><p>appending 中的 property 会覆盖 original 中的同名 property。</p><table><tr><th>original (before)</th><th>appending</th><th>original (after)</th></tr><tr><td>a: 'a.0'</td><td></td><td>a: 'a.0'</td></tr><tr><td>b: 'b.0'</td><td>b: 'b.1'</td><td>b: 'b.1'</td></tr><tr><td></td><td>c: 'c.1'</td><td>c: 'c.1'</td></tr></table>","isConstructor":false,"returns":[{"type":"Object","description":"<p>追加后的 original 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":["var original = {a: 'a.0'};\rvar appending = {b: 'b.1'};\rJSON.stringify(Object.append(original, appending));\r// {\"a\":\"a.0\",\"b\":\"b.1\"}","var original = {a: 'a.0', b: 'b.0', c: 'c.0'};\rvar appending = {a: 'a.1', b: 'b.1', c: 'c.1'};\rJSON.stringify(Object.append(original, appending, {whiteList: ['a', 'b']}));\r// {\"a\":\"a.1\",\"b\":\"b.1\",\"c\":\"c.0\"}\rJSON.stringify(Object.append(original, appending, {whiteList: ['a', 'b'], blackList: ['b', 'c']}));\r// {\"a\":\"a.1\",\"b\":\"b.0\",\"c\":\"c.0\"}"],"isFunction":true,"name":"Object.append"},"Number":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Number"},"Element.prototype.remove":{"requires":[],"parameters":[{"description":"<p>是否保留本元素及后代元素上绑定的所有事件监听器。</p>","type":"boolean","name":"keepListeners","isOptional":true}],"isStatic":false,"description":"<p>将本元素从文档树中删除。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.remove"},"Component.prototype.on":{"requires":[],"parameters":[{"description":"<p>事件名称，格式为 <dfn><var>type</var>.<var>label</var></dfn>，详细信息请参考下表。</p><p>使用逗号分割多个事件名称，即可同时为多个事件注册同一个监听器。</p><table><tr><th></th><th>是否必选</th><th>详细描述</th></tr><tr><td><dfn><var>type</var></dfn></td><td>必选</td><td>要监听的事件类型</td></tr><tr><td><dfn>.<var>label</var></dfn></td><td>可选</td><td>给事件类型加上标签，以便调用 off 方法时精确匹配要删除的事件监听器。<br>不打算删除的事件监听器没有必要指定标签。</td></tr></table>","type":"string","name":"name","isOptional":false},{"description":"<p>事件监听器。</p><p>该函数被调用时 this 的值为本组件。</p>","type":"Function","name":"listener","isOptional":false}],"isStatic":false,"description":"<p>为本组件添加事件监听器。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>本组件。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Component.prototype.on"},"navigator.userAgentInfo.engine":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器渲染引擎的类型，值为以下之一：Trident|WebKit|Gecko|Presto。</p>","isConstructor":false,"returns":[],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.userAgentInfo.engine"},"Element.prototype.getStyle":{"requires":[],"parameters":[{"description":"<p>特性名，支持 camel case 和 hyphenate 格式。</p>","type":"string","name":"propertyName","isOptional":false}],"isStatic":false,"description":"<p>获取本元素的“计算后的样式”中某个特性的值。</p><p>注意：</p><p>不要尝试获取复合属性的值，它们存在兼容性问题。</p><p>不要尝试获取未插入文档树的元素的“计算后的样式”，它们存在兼容性问题。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>对应的特性值，如果获取的是长度值，其单位未必是 px，可能是其定义时的单位。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getStyle"},"Array.prototype.filter":{"requires":[],"parameters":[{"description":"<p>对数组中的每个元素都执行一次的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"isStatic":false,"description":"<p>对数组中的每一个元素都执行一次回调函数，并且创建一个新的数组，该数组包含所有回调函数执行后返回值为 true 时对应的原数组元素。</p>","isConstructor":false,"returns":[{"type":"Array","description":"<p>包含所有回调函数执行后返回值为 true 时对应的原数组元素的新数组。</p>"}],"type":"Array","since":"","see":["http://es5.github.com/#x15.4.4.20","https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter"],"fires":[],"deprecated":"","examples":["var a = [1, 2, 3].filter(function(item) {\r  return item % 2 === 1;\r});\ra;\r// [1, 3]"],"isFunction":true,"name":"Array.prototype.filter"},"Element.prototype.append":{"requires":[],"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"isStatic":false,"description":"<p>将目标元素追加为本元素的最后一个子元素。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.append"},"Element.prototype.innerText":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取/设置本元素内的文本信息。</p><p>注意：</p><p>getter 在遇到 br 元素或换行符时，各浏览器行为不一致。</p>","isConstructor":false,"returns":[],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Element.prototype.innerText"},"Component.prototype.off":{"requires":[],"parameters":[{"description":"<p>事件名称。本组件上绑定的所有名称与 name 匹配的监听器都将被删除。使用逗号分割多个事件名称，即可同时删除多种名称的事件监听器。</p>","type":"string","name":"name","isOptional":false}],"isStatic":false,"description":"<p>删除本组件上已添加的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>本组件。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Component.prototype.off"},"Switcher.prototype.active":{"requires":[],"parameters":[{"description":"<p>要标记为“活动”的元素，或者这个元素在 items 中的索引值。</p><p>要标记为“活动”的元素不能为当前的活动元素。</p><p>如果指定的值为不在 items 中的对象，或为一个不在有效范索引围内的数字，则取消活动元素。</p>","type":"Object|number","name":"value","isOptional":false}],"isStatic":false,"description":"<p>将一个元素标记为“活动”，并将当前的活动元素（如果有）标记为“非活动”。</p><p>如果要标记为“活动”的元素与当前的活动元素相同，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Switcher 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Switcher.prototype.active"},"Validator":{"requires":["Request"],"parameters":[{"description":"<p>要验证的表单元素。</p>","type":"Element","name":"element","isOptional":false},{"description":"<p>验证规则，格式为 {fieldName: rule, ...}。</p><p>其中 fieldName 为要验证的表单域的名称，即表单内对应的 INPUT/SELECT/TEXTAREA 元素的 name 属性值。</p><p>rule 是一个对象，其<strong>可选的</strong>各个属性的要求和含义如下：</p><p>{string} triggerEvent 触发本表单域的验证行为的事件名。</p><p>{boolean} required 是否必填（必选）。</p><p>{string} equals 指定该表单域的值应与哪个表单域的值一致，应指定一个本表单内的表单域的名称。</p><p>{number} minLength 限定最大长度。</p><p>{number} maxLength 限定最小长度。</p><p>{number} minItem 限定最少选择项（仅应在该表单域存在多个元素时使用）。</p><p>{number} maxItem 限定最多选择项（仅应在该表单域存在多个元素时使用）。</p><p>{Function} handler 用来对该表单域的值进行验证的函数，该函数被调用时 this 的值为对应的表单域元素或包含所有对应元素的数组。</p><p>{Object} serverSide 包含两个属性：url 和 options，详细内容请参考 Request 组件。服务端应返回 'true' 或 'false'，如果条件不允许，请考虑使用 options.responseParser 对服务端响应数据进行处理。</p><p>{Function} onFocus 当该表单域对应的元素获得焦点时执行的回调。该函数被调用时传入该表单域的名称，其 this 值为该表单域。</p><p>{Function} onSuccess 该表单域验证成功后的回调。该函数被调用时传入该表单域的名称，其 this 值为该表单域。</p><p>{Function} onFailure 该表单域验证失败后的回调。该函数被调用时传入该表单域的名称，其 this 值为该表单域。</p><p>实际进行验证的步骤与上述各验证规则（除三个回调除外的其余属性）的出现顺序是一致的，即先进行本地验证，最后进行服务端验证（如果有）。</p>","type":"Object","name":"rules","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>触发每个表单域的验证行为的事件名，默认为 'change'。</p><p>如果为 undefined，则在表单提交之前不会对这些表单域进行验证。</p><p>可以在每一个具体的验证规则中覆盖本选项。</p>","type":"string","name":"options.triggerEvent","isOptional":false}],"isStatic":true,"description":"<p>表单验证。</p><p>在要验证的表单被提交时会自动对所有已配置的规则进行验证。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>{Array} fields 包含本次要验证的表单域的数组。</p><p>调用 validate 方法时触发。用于处理可能存在的验证前的一些收尾操作。</p>","name":"validate"},{"description":"<p>{boolean} result 验证结果，仅当所有已配置的验证规则均通过时为 true，否则为 false。</p><p>验证结束时触发。如果存在服务端验证，则不会和 validate 事件同步触发。</p>","name":"validated"}],"deprecated":"","examples":[],"isFunction":true,"name":"Validator"},"navigator.isSafari":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 Safari。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isSafari"},"navigator.userAgentInfo.version":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器的版本号。</p>","isConstructor":false,"returns":[],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.userAgentInfo.version"},"Element.prototype.off":{"requires":[],"parameters":[{"description":"<p>事件名称。本元素上绑定的所有名称与 name 匹配的监听器都将被删除。使用逗号分割多个事件名称，即可同时删除多种名称的事件监听器。</p>","type":"string","name":"name","isOptional":false}],"isStatic":false,"description":"<p>删除本元素上已添加的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":["$('#test').off('click');\r// 为 id 为 test 的元素删除名为 click 的事件监听器。","$('#test').off('click.temp');\r// 为 id 为 test 的元素删除名为 click.temp 的事件监听器。","$('#test').off('click:relay(a)');\r// 为 id 为 test 的元素删除名为 click:relay(a) 的事件监听器。"],"isFunction":true,"name":"Element.prototype.off"},"document.off":{"requires":[],"parameters":[{"description":"<p>事件名称，格式请参考 Element.prototype.off 的同名参数。</p>","type":"string","name":"name","isOptional":false}],"isStatic":true,"description":"<p>删除 document 上已添加的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>document 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"document.off"},"Event.prototype.wheelUp":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标滚轮是否正在向上滚动，仅在 mousewheel 类型的事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.wheelUp"},"Event.prototype.type":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件类型。</p>","isConstructor":false,"returns":[],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.type"},"navigator.isOpera":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 Opera。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isOpera"},"Number.prototype.toJSON":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>将数字转换为 JSON 格式的字符串。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Number.prototype.toJSON"},"String.prototype.endsWith":{"requires":[],"parameters":[{"description":"<p>指定的子串。</p>","type":"string","name":"subString","isOptional":false}],"isStatic":false,"description":"<p>检查字符串是否以指定的子串结束。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"fires":[],"deprecated":"","examples":["'abcdefg'.endsWith('a');\r// false"],"isFunction":true,"name":"String.prototype.endsWith"},"String.prototype.toArray":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>将字符串转化为数组。</p>","isConstructor":false,"returns":[{"type":"Array","description":"<p>从字符串转化的数组。</p>"}],"type":"Array","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"fires":[],"deprecated":"","examples":["'abcdefg'.toArray();\r// ['a', 'b', 'c', 'd', 'e', 'f', 'g']"],"isFunction":true,"name":"String.prototype.toArray"},"Event.prototype.isImmediatePropagationStopped":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>查询事件的传递是否已被立即阻止。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>查询结果。</p>"}],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Event.prototype.isImmediatePropagationStopped"},"document.fire":{"requires":[],"parameters":[{"description":"<p>事件类型。</p>","type":"String","name":"type","isOptional":false},{"description":"<p>在事件对象上附加的数据。</p>","type":"Object","name":"data","isOptional":true}],"isStatic":true,"description":"<p>触发 document 的某类事件，运行相关的事件监听器。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>document 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"document.fire"},"Element.prototype.outerText":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本元素内的文本信息，或使用文本信息替换本元素。</p><p>注意：</p><p>getter 在遇到 br 元素或换行符时，各浏览器行为不一致。</p><p>setter 在特殊元素上调用时（如 body）各浏览器行为不一致。</p><p>与 innerText 不同，如果设置一个元素的 outerText，那么设置的字符串将作为文本节点替换本元素在文档树中的位置。</p>","isConstructor":false,"returns":[],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Element.prototype.outerText"},"Object.clone":{"requires":[],"parameters":[{"description":"<p>原始对象。</p>","type":"Object","name":"source","isOptional":false},{"description":"<p>是否进行深克隆。</p>","type":"boolean","name":"recursive","isOptional":true}],"isStatic":true,"description":"<p>克隆一个对象，返回克隆后的新对象。</p><p>原型链中的 properties 不会被克隆。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>克隆后的新对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Object.clone"},"Event.prototype.middleButton":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时，鼠标中键是否被按下，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.middleButton"},"Animation.prototype.play":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>播放动画。</p><p>如果当前动画正在播放中，或时间点已到达终点，则调用此方法无效。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Animation 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Animation.prototype.play"},"String.prototype.clean":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>合并本字符串中的空白字符，并去掉首尾的空白字符。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>清理后的字符串。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":["' a b  c   d    e     f      g       '.clean();\r// 'a b c d e f g'"],"isFunction":true,"name":"String.prototype.clean"},"Global.declareModule":{"requires":[],"parameters":[{"description":"<p>模块 id。</p>","type":"string","name":"id","isOptional":false},{"description":"<p>模块函数。</p>","type":"Function","name":"moduleFunction","isOptional":false},{"description":"<p>设置为 true 则在 DOM 树加载完成后再执行模块函数，否则立即执行。</p>","type":"boolean","name":"waitingForDomReady","isOptional":true}],"isStatic":true,"description":"<p>声明模块。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Global.declareModule"},"Event.prototype.wheelDown":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标滚轮是否正在向下滚动，仅在 mousewheel 类型的事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.wheelDown"},"Calendar.options":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>默认选项。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Calendar.options"},"navigator.isFirefox":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 Firefox。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isFirefox"},"JSON":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>JSON 对象。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"JSON"},"document.on":{"requires":[],"parameters":[{"description":"<p>事件名称，格式请参考 Element.prototype.on 的同名参数。</p>","type":"string","name":"name","isOptional":false},{"description":"<p>事件监听器，细节请参考 Element.prototype.on 的同名参数。</p>","type":"Function","name":"listener","isOptional":false}],"isStatic":true,"description":"<p>为 document 添加事件监听器。</p><p>特殊事件：domready</p><ul><li>在文档可用时触发，只能添加监听器，不能删除监听器，因此不能使用标签。</li><li>不会有事件对象作为参数传入监听器。</li><li>如果在此事件触发后添加此类型的监听器，这个新添加的监听器将立即运行。</li></ul>","isConstructor":false,"returns":[{"type":"Object","description":"<p>document 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"document.on"},"Array":{"requires":[],"parameters":[],"isStatic":true,"description":"<p></p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Array"},"Calendar.prototype.render":{"requires":[],"parameters":[{"description":"<p>月份，格式为 YYYY-MM 的字符串。</p><p>若该参数没有指定，则使用当前已渲染的月份（即刷新当前的月历）；若没有当前已渲染的月份，则使用当前系统时间所在的月份。</p>","type":"string","name":"month","isOptional":true}],"isStatic":false,"description":"<p>渲染指定的月份。</p>","isConstructor":false,"returns":[{"type":"Calendar","description":"<p>Calendar 对象。</p>"}],"type":"Calendar","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Calendar.prototype.render"},"navigator.isChrome":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 Chrome。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isChrome"},"JSON.stringify":{"requires":[],"parameters":[{"description":"<p>要转换的 ECMAScript 值，通常是 Object 或 Array 类型，也可以是 String、Boolean、Number、Date 类型或者 null。</p>","type":"*","name":"value","isOptional":false},{"description":"<p>用来过滤/更改转换结果的函数或数组。</p><dl><dt>如果是函数，则：</dt><dd><p>该函数将在解析要转换的 ECMAScript 值中每一个键值对之前被调用，传入两个参数 key 和 value，并使用其返回值代替 value 进行转换。<br>如果返回 undefined，则正在处理的这个键值对将被从转换结果中删除。</p><p>该函数第一次被调用（如果要转换的 ECMAScript 值的类型是 String、Boolean、Number、Date 或为 null 时则是唯一一次被调用）时，传入的 key 是空字符串，value 是要转换的 ECMAScript 值。</p><p>该函数被调用时 this 的值为当前传入的 key 和 value 所属的 ECMAScript 对象，可能为 Object 或 Array。</p></dd><dt>如果是数组，则：</dt><dd><p>该数组只能包含字符串，本方法会仅对 key 出现在数组中的部分进行转换。</p></dd></dl>","type":"Function|Array","name":"replacer","isOptional":true},{"description":"<p>为使 JSON 字符串更易读而将其换行，并在每行内容之前加入的前缀。</p><p>如果是字符串，则直接加入这个字符串作为前缀。若字符串的长度超过 10，则仅保留前 10 个字符。</p><p>如果是数字，则加入对应数目的空格符。若数字大于 10，则只使用 10 个空格符。</p><p>如果未指定该值，或者该值为 '' 或小于 1 的数字，则 JSON 字符串不会换行。</p>","type":"string|number","name":"space","isOptional":true}],"isStatic":true,"description":"<p>将 ECMAScript 值转换为 JSON 格式的字符串。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>转换后的字符串。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"JSON.stringify"},"Event.prototype.clientX":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在视口中的 X 坐标，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.clientX"},"Event.prototype.clientY":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在视口中的 Y 坐标，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.clientY"},"Event.prototype.ctrlKey":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时，ctrl 键是否被按下。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.ctrlKey"},"Event.prototype.leftButton":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时，鼠标左键是否被按下，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.leftButton"},"Slideshow":{"requires":["TabPanel"],"parameters":[{"description":"<p>相关元素。</p>","type":"Object","name":"elements","isOptional":false},{"description":"<p>包含所有“幻灯片”的数组。组成“幻灯片”的各元素的渲染尺寸应该一致，并且有共同的父元素。</p>","type":"Array","name":"elements.slides","isOptional":false},{"description":"<p>包含所有“指示器”的数组。组成“指示器”的各元素的标签名应该一致，并且有共同的父元素。另外应确保 pointers 的数量和 slides 的数量一致。</p>","type":"Array","name":"elements.pointers","isOptional":false},{"description":"<p>“显示上一张”按钮。</p>","type":"Element","name":"elements.prev","isOptional":false},{"description":"<p>“显示下一张”按钮。</p>","type":"Element","name":"elements.next","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>为激活的“幻灯片”和“指示器”添加的类名，默认为 'active'。</p>","type":"string","name":"options.activeClassName","isOptional":false},{"description":"<p>以毫秒为单位的“指示器”鼠标悬停激活延时，默认为 undefined，此时由鼠标点击事件激活。若要启用鼠标悬停激活，建议设置为 200 - 400 之间的数值。</p>","type":"number","name":"options.hoverDelay","isOptional":false},{"description":"<p>幻灯片切换的模式，目前支持 'normal'，'fading' 和 'turning' 三种，默认为 'fading'。</p>","type":"string","name":"options.switchMode","isOptional":false},{"description":"<p>以毫秒为单位的自动播放间隔，默认为 5000。</p>","type":"number","name":"options.interval","isOptional":false}],"isStatic":true,"description":"<p>幻灯片播放器。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>{Element} activeSlide 当前的激活的“幻灯片”。</p><p>{Element} activePointer 当前的激活的“指示器”。</p><p>{number} activeIndex 当前的激活的“指示器”和“幻灯片”在 pointers 和 slides 中的索引。</p><p>{Element} inactiveSlide 上一个激活的“幻灯片”。</p><p>{Element} inactivePointer 上一个激活的“指示器”。</p><p>{number} inactiveIndex 上一个激活的“指示器”和“幻灯片”在 pointers 和 slides 中的索引。</p><p>成功调用 show 方法后触发。</p>","name":"show"}],"deprecated":"","examples":[],"isFunction":true,"name":"Slideshow"},"cookie.getItem":{"requires":[],"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"isStatic":true,"description":"<p>从 cookie 中读取一条数据。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>数据值。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"cookie.getItem"},"String.prototype.startsWith":{"requires":[],"parameters":[{"description":"<p>指定的子串。</p>","type":"string","name":"subString","isOptional":false}],"isStatic":false,"description":"<p>检查字符串是否以指定的子串开始。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:string_extras"],"fires":[],"deprecated":"","examples":["'abcdefg'.startsWith('a');\r// true"],"isFunction":true,"name":"String.prototype.startsWith"},"Calendar":{"requires":[],"parameters":[{"description":"<p>创建的最外层 DOM 元素的类名，默认为 'calendar'。</p>","type":"string","name":"className","isOptional":true},{"description":"<p>可选参数，这些参数的默认值保存在 Calendar.options 中。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>指定每周的第一天是星期几，取值范围为 0 - 6，默认为 0，即星期日。</p>","type":"number","name":"options.firstDayOfWeek","isOptional":false},{"description":"<p>最小日期，格式为 YYYY-MM-DD，默认为 1900-01-01。</p>","type":"string","name":"options.minDate","isOptional":false},{"description":"<p>最大日期，格式为 YYYY-MM-DD，默认为 2100-12-31。</p>","type":"string","name":"options.maxDate","isOptional":false}],"isStatic":true,"description":"<p>月历。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>{string} renderedMonth 渲染的月份，格式为 YYYY-MM 的字符串。</p><p>调用 render 方法后触发。</p>","name":"render"},{"description":"<p>{Element} cell 已更新的单元格。</p><p>{Date} date 已更新的日期。</p><p>日期单元格更新后触发，每次调用 render 方法时，每个日期单元格都会更新一次。</p>","name":"cellUpdate"}],"deprecated":"","examples":[],"isFunction":true,"name":"Calendar"},"document.preloadImages":{"requires":[],"parameters":[{"description":"<p>包含需预加载的图片路径的数组。</p>","type":"Array","name":"urlArray","isOptional":false}],"isStatic":true,"description":"<p>预加载图片。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"document.preloadImages"},"Array.isArray":{"requires":[],"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"isStatic":true,"description":"<p>检查提供的值是否为数组。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://es5.github.com/#x15.4.3.2","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray"],"fires":[],"deprecated":"","examples":["Array.isArray([]);\r// true"],"isFunction":true,"name":"Array.isArray"},"Element.prototype.fadeIn":{"requires":[],"parameters":[{"description":"<p>动画选项。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>播放时间，单位是毫秒，默认为 200。</p>","type":"number","name":"options.duration","isOptional":false},{"description":"<p>控速函数名称或表达式，细节请参考 Animation.prototype.addClip 的同名参数，默认为 'easeIn'。</p>","type":"string","name":"options.timingFunction","isOptional":false},{"description":"<p>播放开始时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onStart","isOptional":false},{"description":"<p>播放完成时的回调。</p><p>该函数被调用时 this 的值为本元素。</p>","type":"Function","name":"options.onFinish","isOptional":false}],"isStatic":false,"description":"<p>让本元素播放一个淡入动画。</p><p>display 不为 none 的元素不能播放淡入动画。</p><p>如果本元素的动画播放列表中已经存在一个 fadeOut 动画，则反向播放前者，并删除前者的 onFinish 回调，执行后者的 onStart 回调，并在反向播放结束时执行后者的 onFinish 回调。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.fadeIn"},"Array.prototype.getLast":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>获取本数组的最后一个元素。</p>","isConstructor":false,"returns":[{"type":"*","description":"<p>本数组的最后一个元素。</p>"}],"type":"*","since":"","see":[],"fires":[],"deprecated":"","examples":["[0, 1, 2, 3, 4].getLast();\r// 4"],"isFunction":true,"name":"Array.prototype.getLast"},"Element.prototype.empty":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>将本元素的内容清空，并删除本元素及后代元素上绑定的所有事件监听器。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.empty"},"Validator.options":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>默认选项。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Validator.options"},"Event.prototype.metaKey":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时，meta 键是否被按下。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.metaKey"},"Event.prototype.originalEvent":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>原始事件对象。</p>","isConstructor":false,"returns":[],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.originalEvent"},"document.head":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>获取文档的 head 元素。</p><p>与 document.documentElement 和 document.body 的作用一样，document.head 是获取文档的 head 元素的快捷方式。</p>","isConstructor":false,"returns":[],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":["document.documentElement === document.getElementsByTagName('html')[0];\r// true\rdocument.head === document.getElementsByTagName('head')[0];\r// true\rdocument.body === document.getElementsByTagName('body')[0];\r// true"],"isFunction":false,"name":"document.head"},"Dialog.options":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>默认选项。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Dialog.options"},"navigator.userAgentInfo":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>从 navigator.userAgent 中提取的常用信息。</p><p>注意：</p><p>navigator.userAgentInfo 下的三个属性是根据 navigator.userAgent 得到的，仅供参考使用，不建议用在代码逻辑判断中。</p>","isConstructor":false,"returns":[],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.userAgentInfo"},"Element.prototype":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>可以通过扩展本对象来为页面中的所有元素扩展新特性。</p><p>注意：</p><p>受 IE6 IE7 实现方式的限制，扩展新特性应在获取元素之前进行，否则已获取的元素将无法访问新扩展的特性。</p>","isConstructor":false,"returns":[],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":["Element.prototype.getNodeName = function() {\r  return this.nodeName;\r};\r$(document.head).getNodeName();\r// HEAD"],"isFunction":false,"name":"Element.prototype"},"Array.prototype.some":{"requires":[],"parameters":[{"description":"<p>用来检查的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p><p>回调函数返回 true 表示当前元素通过检查，反之表示未通过检查。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"isStatic":false,"description":"<p>检查数组中是否有任一元素符合某个条件。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":["http://es5.github.com/#x15.4.4.17","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some"],"fires":[],"deprecated":"","examples":["[1, 2, 3].some(function(item) {\r  return item === 2;\r});\r// true"],"isFunction":true,"name":"Array.prototype.some"},"Event.prototype.relatedTarget":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件被触发时的相关对象，仅在 mouseover/mouseout 类型的事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.relatedTarget"},"document":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>扩展 document 对象。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"document"},"JSON.parse":{"requires":[],"parameters":[{"description":"<p>要转换的 JSON 格式的字符串。</p>","type":"string","name":"text","isOptional":false},{"description":"<p>用来过滤或更改转换结果的函数。</p><p>该函数将在解析 text 中每一个键值对之后被调用，传入两个参数 key 和 value，并使用其返回值代替 value 作为最终值。<br>如果返回 undefined，则正在处理的这个键值对将被从转换结果中删除。</p><p>该函数最后一次被调用（如果 text 表示的是一个 String、Boolean、Number 类型的值或 null 时则是唯一一次被调用）时，传入的 key 是空字符串，value 是已从 text 转换到 ECMAScript 值的结果。</p><p>该函数被调用时 this 的值为当前传入的 key 和 value 所属的 ECMAScript 对象，可能为 Object 或 Array。</p>","type":"Function","name":"reviver","isOptional":true}],"isStatic":true,"description":"<p>将 JSON 格式的字符串转换为 ECMAScript 值。</p>","isConstructor":false,"returns":[{"type":"*","description":"<p>转换后的 ECMAScript 值。</p>"}],"type":"*","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"JSON.parse"},"Object.keys":{"requires":[],"parameters":[{"description":"<p>要获取键列表的对象。</p>","type":"Object","name":"object","isOptional":false}],"isStatic":true,"description":"<p>获取对象的键列表。</p>","isConstructor":false,"returns":[{"type":"Array","description":"<p>对象的键列表。</p>"}],"type":"Array","since":"","see":["http://es5.github.com/#x15.2.3.14","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys","http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation"],"fires":[],"deprecated":"","examples":["Object.keys({a: 97, b: 98, c: 99});\r// ['a', 'b', 'c']"],"isFunction":true,"name":"Object.keys"},"cookie.removeItem":{"requires":[],"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false},{"description":"<p>可选参数。</p>","type":"Object","name":"options","isOptional":true},{"description":"<p>限定生效的路径，默认为当前路径。</p>","type":"string","name":"options.path","isOptional":false},{"description":"<p>限定生效的域名，默认为当前域名。</p>","type":"string","name":"options.domain","isOptional":false},{"description":"<p>是否仅通过 SSL 连接 (HTTPS) 传输本条数据，默认为否。</p>","type":"boolean","name":"options.secure","isOptional":false}],"isStatic":true,"description":"<p>从 cookie 中删除一条数据。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"cookie.removeItem"},"Array.prototype.contains":{"requires":[],"parameters":[{"description":"<p>指定的元素。</p>","type":"*","name":"element","isOptional":false}],"isStatic":false,"description":"<p>检查本数组中是否包含指定的元素。</p>","isConstructor":false,"returns":[{"type":"boolean","description":"<p>检查结果。</p>"}],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":["[0, 1, 2, 3, 4].contains(2);\r// true"],"isFunction":true,"name":"Array.prototype.contains"},"Element.prototype.getData":{"requires":[],"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"isStatic":false,"description":"<p>从本元素中读取一条自定义数据。</p><p>注意：</p><p>Chrome 在 dataset 中不存在名称为 key 的值时，返回空字符串，Firefox Safari Opera 返回 undefined。此处均返回 undefined。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>数据值。</p>"}],"type":"string","since":"","see":["http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#embedding-custom-non-visible-data-with-the-data-attributes"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.getData"},"Array.prototype.forEach":{"requires":[],"parameters":[{"description":"<p>对数组中的每个元素都执行一次的回调函数。</p><p>回调函数有三个参数：当前元素，当前元素的索引和调用该方法的数组对象。</p>","type":"Function","name":"callback","isOptional":false},{"description":"<p>callback 被调用时 this 的值，如果省略或指定为 null，则使用全局对象 window。</p>","type":"Object","name":"thisObject","isOptional":true}],"isStatic":false,"description":"<p>遍历数组，对数组中的每一个元素都执行一次指定的函数。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":["http://es5.github.com/#x15.4.4.18","https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach"],"fires":[],"deprecated":"","examples":["var s = '';\r[1, 2, 3].forEach(function(item) {\r  s += item;\r});\rs;\r// 123"],"isFunction":true,"name":"Array.prototype.forEach"},"Element.prototype.removeClass":{"requires":[],"parameters":[{"description":"<p>类名。</p>","type":"string","name":"className","isOptional":false}],"isStatic":false,"description":"<p>为本元素删除一个类名。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.removeClass"},"Element.prototype.toggleClass":{"requires":[],"parameters":[{"description":"<p>类名。</p>","type":"string","name":"className","isOptional":false}],"isStatic":false,"description":"<p>为本元素添加一个类名（如果本元素没有这个类名）或删除一个类名（如果本元素有这个类名）。</p>","isConstructor":false,"returns":[{"type":"Element","description":"<p>本元素。</p>"}],"type":"Element","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.toggleClass"},"Animation.prototype.addClip":{"requires":[],"parameters":[{"description":"<p>使用 Animation.create*Renderer 创建的渲染器。</p><p>该函数被调用时 this 的值为所属的 Animation 对象。</p>","type":"Function","name":"renderer","isOptional":false},{"description":"<p>延时。</p>","type":"number","name":"delay","isOptional":false},{"description":"<p>播放时间。</p>","type":"number","name":"duration","isOptional":false},{"description":"<p>控速函数名称或表达式。</p><p>支持的名称有 linear，bounceIn，bounceOut，ease，easeIn，easeOut，easeInOut，easeOutIn。</p><p>表达式的格式为 <dfn>cubicBezier(<var>p1x</var>, <var>p1y</var>, <var>p2x</var>, <var>p2y</var>)</dfn>，各参数均为浮点数，其中 <var>p1x</var> 和 <var>p2x</var> 的取值范围必须在 [0, 1] 之间。</p>","type":"string","name":"timingFunction","isOptional":false}],"isStatic":false,"description":"<p>添加动画剪辑。</p>","isConstructor":false,"returns":[{"type":"Object","description":"<p>Animation 对象。</p>"}],"type":"Object","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Animation.prototype.addClip"},"Global.execute":{"requires":[],"parameters":[{"description":"<p>包含要执行的代码块的匿名函数。</p>","type":"Function","name":"codeBlock","isOptional":false},{"description":"<p>设置为 true 则在 DOM 树解析完成后再执行代码块，否则立即执行。</p>","type":"boolean","name":"waitingForDomReady","isOptional":true}],"isStatic":true,"description":"<p>执行代码块。</p><p>通常，为了减少全局变量的数量和避免不同代码块之间的变量名有冲突，会使用一个匿名函数来执行一个相对独立的代码块。</p><p>使用本方法可以达到相同目的，除此之外还有以下好处：</p><ul><li>函数 codeBlock 的第一个参数将被传入 document.$，因此可以通过在该函数的形参中写上一个 $，以便在函数内直接使用 $ 而不必担心与其他脚本库的 $ 冲突。</li><li>可选参数 waitingForDomReady 可以控制 codeBlock 的执行时机（如何设置这个参数取决于代码块内是否有依赖 DOM 元素的操作）。</li></ul>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":["execute(function($){...});\r// 在包含代码块的匿名函数使用 $ 代替 document.$。","execute(function($){...}, true);\r// 包含代码块的匿名函数将在 DOM 树解析完成后执行。"],"isFunction":true,"name":"Global.execute"},"Element.prototype.comparePosition":{"requires":[],"parameters":[{"description":"<p>目标元素。</p>","type":"Element","name":"target","isOptional":false}],"isStatic":false,"description":"<p>比较本元素和目标元素在文档树中的位置关系。</p><p>调用本方法后返回的 number 值的含义：</p><table><tr><th>Bits</th><th>Number</th><th>Meaning</th></tr><tr><td>000000</td><td>0</td><td>节点 A 与节点 B 相等</td></tr><tr><td>000001</td><td>1</td><td>节点 A 与节点 B 在不同的文档（或者一个在文档之外）</td></tr><tr><td>000010</td><td>2</td><td>节点 B 在节点 A 之前</td></tr><tr><td>000100</td><td>4</td><td>节点 A 在节点 B 之前</td></tr><tr><td>001000</td><td>8</td><td>节点 B 包含节点 A</td></tr><tr><td>010000</td><td>16</td><td>节点 A 包含节点 B</td></tr><tr><td>100000</td><td>32</td><td>浏览器的私有使用</td></tr></table>","isConstructor":false,"returns":[{"type":"number","description":"<p>比较结果。</p>"}],"type":"number","since":"","see":["http://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-compareDocumentPosition","http://ejohn.org/blog/comparing-document-position/"],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"Element.prototype.comparePosition"},"Event.prototype.screenX":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在屏幕上的 X 坐标，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.screenX"},"Event.prototype.screenY":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时鼠标在屏幕上的 Y 坐标，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"number","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.screenY"},"Animation":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>动画。</p><p>向一个动画中添加多个剪辑，并调整每个剪辑的 delay，duration，timingFunction 参数，以实现复杂的动画。<br>仅应在动画初始化时（播放之前）添加动画剪辑，不要在开始播放后添加或更改动画剪辑。</p><p>在 step 事件监听器中访问 this.timePoint 可以获得当前帧所处的时间点。</p>","isConstructor":true,"returns":[],"type":"","since":"","see":[],"fires":[{"description":"<p>成功调用 play 方法后，正向播放开始前触发。</p>","name":"play"},{"description":"<p>正向播放开始前（渲染整个动画的第一帧之前）触发。</p>","name":"playstart"},{"description":"<p>正向播放结束后（渲染整个动画的最后一帧之后）触发。</p>","name":"playfinish"},{"description":"<p>成功调用 reverse 方法后，反向播放开始前触发。</p>","name":"reverse"},{"description":"<p>反向播放开始前（渲染整个动画的第一帧之前）触发。</p>","name":"reversestart"},{"description":"<p>反向播放结束后（渲染整个动画的最后一帧之后）触发。</p>","name":"reversefinish"},{"description":"<p>渲染动画的每一帧之后触发。</p>","name":"step"},{"description":"<p>成功调用 pause 方法后触发。</p>","name":"pause"},{"description":"<p>成功调用 stop 方法后触发。</p>","name":"stop"}],"deprecated":"","examples":[],"isFunction":true,"name":"Animation"},"navigator":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>扩展 navigator 对象，提供更多关于浏览器的信息。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator"},"Event.prototype.bubbles":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>是否可以冒泡，不冒泡的事件不能使用代理事件监听。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.bubbles"},"navigator.isIElt8":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE，且版本小于 8。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIElt8"},"localStorage.getItem":{"requires":[],"parameters":[{"description":"<p>数据名。</p>","type":"string","name":"key","isOptional":false}],"isStatic":true,"description":"<p>从 localStorage 中读取一条数据。</p>","isConstructor":false,"returns":[{"type":"string","description":"<p>数据值。</p>"}],"type":"string","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":true,"name":"localStorage.getItem"},"navigator.isIElt9":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>浏览器是否为 IE，且版本小于 9。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"navigator.isIElt9"},"cookie":{"requires":[],"parameters":[],"isStatic":true,"description":"<p>提供操作 cookie 的常用方法。</p>","isConstructor":false,"returns":[],"type":"","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"cookie"},"Number.toInteger":{"requires":[],"parameters":[{"description":"<p>提供的值。</p>","type":"*","name":"value","isOptional":false}],"isStatic":true,"description":"<p>将提供的值转化为整数。</p>","isConstructor":false,"returns":[{"type":"number","description":"<p>转化结果。</p>"}],"type":"number","since":"","see":["http://wiki.ecmascript.org/doku.php?id=harmony:number.tointeger"],"fires":[],"deprecated":"","examples":["Number.toInteger([10.75]);\r// 10\rNumber.toInteger('10px');\r// 0"],"isFunction":true,"name":"Number.toInteger"},"Event.prototype.rightButton":{"requires":[],"parameters":[],"isStatic":false,"description":"<p>事件发生时，鼠标右键是否被按下，仅在鼠标事件对象上有效。</p>","isConstructor":false,"returns":[],"type":"boolean","since":"","see":[],"fires":[],"deprecated":"","examples":[],"isFunction":false,"name":"Event.prototype.rightButton"}};